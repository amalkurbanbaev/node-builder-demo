/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./../../routes/__root"
import { Route as FlowRouteImport } from "./../../routes/flow/route"
import { Route as DashboardRouteImport } from "./../../routes/_dashboard/route"
import { Route as FlowIndexImport } from "./../../routes/flow/index"
import { Route as DashboardIndexImport } from "./../../routes/_dashboard/index"
import { Route as DashboardTemplatesImport } from "./../../routes/_dashboard/templates"
import { Route as DashboardProjectsImport } from "./../../routes/_dashboard/projects"
import { Route as DashboardSettingsIndexImport } from "./../../routes/_dashboard/settings/index"
import { Route as DashboardDocumentationIndexImport } from "./../../routes/_dashboard/documentation/index"
import { Route as DashboardConnectionsIndexImport } from "./../../routes/_dashboard/connections/index"
import { Route as DashboardSettingsGeneralImport } from "./../../routes/_dashboard/settings/general"

// Create/Update Routes

const FlowRouteRoute = FlowRouteImport.update({
  id: "/flow",
  path: "/flow",
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: "/_dashboard",
  getParentRoute: () => rootRoute,
} as any)

const FlowIndexRoute = FlowIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => FlowRouteRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardTemplatesRoute = DashboardTemplatesImport.update({
  id: "/templates",
  path: "/templates",
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardProjectsRoute = DashboardProjectsImport.update({
  id: "/projects",
  path: "/projects",
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardSettingsIndexRoute = DashboardSettingsIndexImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardDocumentationIndexRoute =
  DashboardDocumentationIndexImport.update({
    id: "/documentation/",
    path: "/documentation/",
    getParentRoute: () => DashboardRouteRoute,
  } as any)

const DashboardConnectionsIndexRoute = DashboardConnectionsIndexImport.update({
  id: "/connections/",
  path: "/connections/",
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardSettingsGeneralRoute = DashboardSettingsGeneralImport.update({
  id: "/settings/general",
  path: "/settings/general",
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_dashboard": {
      id: "/_dashboard"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    "/flow": {
      id: "/flow"
      path: "/flow"
      fullPath: "/flow"
      preLoaderRoute: typeof FlowRouteImport
      parentRoute: typeof rootRoute
    }
    "/_dashboard/projects": {
      id: "/_dashboard/projects"
      path: "/projects"
      fullPath: "/projects"
      preLoaderRoute: typeof DashboardProjectsImport
      parentRoute: typeof DashboardRouteImport
    }
    "/_dashboard/templates": {
      id: "/_dashboard/templates"
      path: "/templates"
      fullPath: "/templates"
      preLoaderRoute: typeof DashboardTemplatesImport
      parentRoute: typeof DashboardRouteImport
    }
    "/_dashboard/": {
      id: "/_dashboard/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    "/flow/": {
      id: "/flow/"
      path: "/"
      fullPath: "/flow/"
      preLoaderRoute: typeof FlowIndexImport
      parentRoute: typeof FlowRouteImport
    }
    "/_dashboard/settings/general": {
      id: "/_dashboard/settings/general"
      path: "/settings/general"
      fullPath: "/settings/general"
      preLoaderRoute: typeof DashboardSettingsGeneralImport
      parentRoute: typeof DashboardRouteImport
    }
    "/_dashboard/connections/": {
      id: "/_dashboard/connections/"
      path: "/connections"
      fullPath: "/connections"
      preLoaderRoute: typeof DashboardConnectionsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    "/_dashboard/documentation/": {
      id: "/_dashboard/documentation/"
      path: "/documentation"
      fullPath: "/documentation"
      preLoaderRoute: typeof DashboardDocumentationIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    "/_dashboard/settings/": {
      id: "/_dashboard/settings/"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof DashboardSettingsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardProjectsRoute: typeof DashboardProjectsRoute
  DashboardTemplatesRoute: typeof DashboardTemplatesRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardSettingsGeneralRoute: typeof DashboardSettingsGeneralRoute
  DashboardConnectionsIndexRoute: typeof DashboardConnectionsIndexRoute
  DashboardDocumentationIndexRoute: typeof DashboardDocumentationIndexRoute
  DashboardSettingsIndexRoute: typeof DashboardSettingsIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardProjectsRoute: DashboardProjectsRoute,
  DashboardTemplatesRoute: DashboardTemplatesRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardSettingsGeneralRoute: DashboardSettingsGeneralRoute,
  DashboardConnectionsIndexRoute: DashboardConnectionsIndexRoute,
  DashboardDocumentationIndexRoute: DashboardDocumentationIndexRoute,
  DashboardSettingsIndexRoute: DashboardSettingsIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface FlowRouteRouteChildren {
  FlowIndexRoute: typeof FlowIndexRoute
}

const FlowRouteRouteChildren: FlowRouteRouteChildren = {
  FlowIndexRoute: FlowIndexRoute,
}

const FlowRouteRouteWithChildren = FlowRouteRoute._addFileChildren(
  FlowRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  "": typeof DashboardRouteRouteWithChildren
  "/flow": typeof FlowRouteRouteWithChildren
  "/projects": typeof DashboardProjectsRoute
  "/templates": typeof DashboardTemplatesRoute
  "/": typeof DashboardIndexRoute
  "/flow/": typeof FlowIndexRoute
  "/settings/general": typeof DashboardSettingsGeneralRoute
  "/connections": typeof DashboardConnectionsIndexRoute
  "/documentation": typeof DashboardDocumentationIndexRoute
  "/settings": typeof DashboardSettingsIndexRoute
}

export interface FileRoutesByTo {
  "/projects": typeof DashboardProjectsRoute
  "/templates": typeof DashboardTemplatesRoute
  "/": typeof DashboardIndexRoute
  "/flow": typeof FlowIndexRoute
  "/settings/general": typeof DashboardSettingsGeneralRoute
  "/connections": typeof DashboardConnectionsIndexRoute
  "/documentation": typeof DashboardDocumentationIndexRoute
  "/settings": typeof DashboardSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/_dashboard": typeof DashboardRouteRouteWithChildren
  "/flow": typeof FlowRouteRouteWithChildren
  "/_dashboard/projects": typeof DashboardProjectsRoute
  "/_dashboard/templates": typeof DashboardTemplatesRoute
  "/_dashboard/": typeof DashboardIndexRoute
  "/flow/": typeof FlowIndexRoute
  "/_dashboard/settings/general": typeof DashboardSettingsGeneralRoute
  "/_dashboard/connections/": typeof DashboardConnectionsIndexRoute
  "/_dashboard/documentation/": typeof DashboardDocumentationIndexRoute
  "/_dashboard/settings/": typeof DashboardSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ""
    | "/flow"
    | "/projects"
    | "/templates"
    | "/"
    | "/flow/"
    | "/settings/general"
    | "/connections"
    | "/documentation"
    | "/settings"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/projects"
    | "/templates"
    | "/"
    | "/flow"
    | "/settings/general"
    | "/connections"
    | "/documentation"
    | "/settings"
  id:
    | "__root__"
    | "/_dashboard"
    | "/flow"
    | "/_dashboard/projects"
    | "/_dashboard/templates"
    | "/_dashboard/"
    | "/flow/"
    | "/_dashboard/settings/general"
    | "/_dashboard/connections/"
    | "/_dashboard/documentation/"
    | "/_dashboard/settings/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  FlowRouteRoute: typeof FlowRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  FlowRouteRoute: FlowRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard",
        "/flow"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard/route.tsx",
      "children": [
        "/_dashboard/projects",
        "/_dashboard/templates",
        "/_dashboard/",
        "/_dashboard/settings/general",
        "/_dashboard/connections/",
        "/_dashboard/documentation/",
        "/_dashboard/settings/"
      ]
    },
    "/flow": {
      "filePath": "flow/route.tsx",
      "children": [
        "/flow/"
      ]
    },
    "/_dashboard/projects": {
      "filePath": "_dashboard/projects.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/templates": {
      "filePath": "_dashboard/templates.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/": {
      "filePath": "_dashboard/index.tsx",
      "parent": "/_dashboard"
    },
    "/flow/": {
      "filePath": "flow/index.tsx",
      "parent": "/flow"
    },
    "/_dashboard/settings/general": {
      "filePath": "_dashboard/settings/general.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/connections/": {
      "filePath": "_dashboard/connections/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/documentation/": {
      "filePath": "_dashboard/documentation/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/settings/": {
      "filePath": "_dashboard/settings/index.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
