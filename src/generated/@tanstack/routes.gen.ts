/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./../../routes/__root"
import { Route as ConnectionsImport } from "./../../routes/connections"
import { Route as FlowRouteImport } from "./../../routes/flow/route"
import { Route as IndexImport } from "./../../routes/index"
import { Route as SettingsIndexImport } from "./../../routes/settings/index"
import { Route as FlowIndexImport } from "./../../routes/flow/index"
import { Route as SettingsGeneralImport } from "./../../routes/settings/general"

// Create/Update Routes

const ConnectionsRoute = ConnectionsImport.update({
  id: "/connections",
  path: "/connections",
  getParentRoute: () => rootRoute,
} as any)

const FlowRouteRoute = FlowRouteImport.update({
  id: "/flow",
  path: "/flow",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => rootRoute,
} as any)

const FlowIndexRoute = FlowIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => FlowRouteRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  id: "/settings/general",
  path: "/settings/general",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/flow": {
      id: "/flow"
      path: "/flow"
      fullPath: "/flow"
      preLoaderRoute: typeof FlowRouteImport
      parentRoute: typeof rootRoute
    }
    "/connections": {
      id: "/connections"
      path: "/connections"
      fullPath: "/connections"
      preLoaderRoute: typeof ConnectionsImport
      parentRoute: typeof rootRoute
    }
    "/settings/general": {
      id: "/settings/general"
      path: "/settings/general"
      fullPath: "/settings/general"
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof rootRoute
    }
    "/flow/": {
      id: "/flow/"
      path: "/"
      fullPath: "/flow/"
      preLoaderRoute: typeof FlowIndexImport
      parentRoute: typeof FlowRouteImport
    }
    "/settings/": {
      id: "/settings/"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface FlowRouteRouteChildren {
  FlowIndexRoute: typeof FlowIndexRoute
}

const FlowRouteRouteChildren: FlowRouteRouteChildren = {
  FlowIndexRoute: FlowIndexRoute,
}

const FlowRouteRouteWithChildren = FlowRouteRoute._addFileChildren(
  FlowRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/flow": typeof FlowRouteRouteWithChildren
  "/connections": typeof ConnectionsRoute
  "/settings/general": typeof SettingsGeneralRoute
  "/flow/": typeof FlowIndexRoute
  "/settings": typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/connections": typeof ConnectionsRoute
  "/settings/general": typeof SettingsGeneralRoute
  "/flow": typeof FlowIndexRoute
  "/settings": typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/flow": typeof FlowRouteRouteWithChildren
  "/connections": typeof ConnectionsRoute
  "/settings/general": typeof SettingsGeneralRoute
  "/flow/": typeof FlowIndexRoute
  "/settings/": typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/flow"
    | "/connections"
    | "/settings/general"
    | "/flow/"
    | "/settings"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/connections" | "/settings/general" | "/flow" | "/settings"
  id:
    | "__root__"
    | "/"
    | "/flow"
    | "/connections"
    | "/settings/general"
    | "/flow/"
    | "/settings/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlowRouteRoute: typeof FlowRouteRouteWithChildren
  ConnectionsRoute: typeof ConnectionsRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlowRouteRoute: FlowRouteRouteWithChildren,
  ConnectionsRoute: ConnectionsRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/flow",
        "/connections",
        "/settings/general",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/flow": {
      "filePath": "flow/route.tsx",
      "children": [
        "/flow/"
      ]
    },
    "/connections": {
      "filePath": "connections.tsx"
    },
    "/settings/general": {
      "filePath": "settings/general.tsx"
    },
    "/flow/": {
      "filePath": "flow/index.tsx",
      "parent": "/flow"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
